# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# JJFAST_0916.py
# Created on: 2016-09-16 09:17:44.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import datetime # datetimeモジュールのインポート
import arcpy
import os
import sys
import math
from arcpy.sa import *
import numpy
import arcpy, string
from arcpy import env
import glob
import Tkinter
import tkMessageBox
import tkFileDialog

if __name__ == '__main__':

    #--- 処理開始時間
    Start_Time = datetime.datetime.now()
    print "開始時間：",Start_Time.strftime("%Y-%m-%d %H:%M:%S")
    #---
    arcpy.CheckOutExtension("spatial")
    
    root=Tkinter.Tk()
    root.withdraw()
    fTyp=[('shapefile', '*.shp')]
    
    #AOI、画像ファイル、アウトプットフォルダの指定（ダイアログボックスで指定）
    AOI = tkFileDialog.askopenfilename(filetypes=fTyp, title=u"AOIシェープファイルを選択")
    image_files = tkFileDialog.askopenfilenames(title=u"処理する画像ファイルを全て選択　※imgまたはtifファイルのみ")
    output_path = tkFileDialog.askdirectory(title=u"アウトプットデータを保存するフォルダを選択")
    zukaku_file = tkFileDialog.askopenfilename(filetypes=fTyp, title=u"図郭シェープファイルを選択")
    #空間検索用に図郭ファイルをレイヤーファイルにしておく
    zukaku_shp = str(zukaku_file).replace("/", "\\")
    zukaku_lyr = zukaku_shp.replace(".shp", ".lyr")
    if os.path.exists(zukaku_lyr) == False:
        arcpy.MakeFeatureLayer_management(zukaku_shp, zukaku_lyr)   
        
    #アウトプットフォルダ内に各種ファイルごとのフォルダを作成
    home_path = output_path + "\\" + "01_clip_image"
    clip_image_path = home_path + "\\" + "02_clip_image_AOI"
    boundary_path = home_path + "\\" + "04_boundary"
    zukaku_selected_path = home_path + "\\" + "03_zukaku_selected"
    tiff_split_path = home_path + "\\" + "01_tiff_split"
    if os.path.exists(home_path) == False:
        os.mkdir(home_path)
    if os.path.exists(clip_image_path) == False:
        os.mkdir(clip_image_path)
    if os.path.exists(boundary_path) == False:
        os.mkdir(boundary_path)
    if os.path.exists(zukaku_selected_path) == False:
        os.mkdir(zukaku_selected_path)
    if os.path.exists(tiff_split_path) == False:
        os.mkdir(tiff_split_path)
     
        
    #画像ごとに処理
    for image in image_files: 
        basename, ext = os.path.splitext( os.path.basename(image) )
        #AOIで画像をクリップ
        clip_image = clip_image_path + "\\" + basename + ".tif"
        if os.path.exists(clip_image) == False:
            arcpy.Clip_management(image, "#", clip_image, AOI, "0", "ClippingGeometry")
        
        #クリップ画像範囲のシャープファイル作成（図郭を画像範囲でクリップするため）        
        binary_image = boundary_path + "\\" + basename + "_binary.tif"
        binary_poly = boundary_path + "\\" + basename + "_binary.shp"
        if os.path.exists(binary_image) == False:
            binary = GreaterThanEqual(clip_image, 0)
            binary.save(binary_image)
        if os.path.exists(binary_poly) == False:
            arcpy.RasterToPolygon_conversion(binary_image, binary_poly, "NO_SIMPLIFY", "VALUE")
        
        #図郭ファイルから画像に重なるフィーチャのみを抽出
        arcpy.SelectLayerByLocation_management(zukaku_lyr, "INTERSECT", binary_poly)
        zukaku_selected = zukaku_selected_path + "\\" + basename + ".shp"
        if os.path.exists(zukaku_selected) == False:
            arcpy.CopyFeatures_management(zukaku_lyr, zukaku_selected)
    
        #zukakuのフィーチャ数をカウントし、何回リピート必要か決める 
        result = arcpy.GetCount_management(zukaku_selected)
        count_features = int(result.getOutput(0))        
        Repeat = int(count_features)+1
        print count_features
           
        #属性検索用にシェープファイルからレイヤーファイル作成 
        zukaku_lyr_path = str(zukaku_selected_path).replace("/", "\\")
        zukaku_selected_lyr = zukaku_lyr_path + "\\" + basename + ".lyr"
        arcpy.MakeFeatureLayer_management(zukaku_selected, zukaku_selected_lyr)
        
        #フィーチャごとに繰り返しで、フィーチャの切り出し→画像のクリップ
        for i in range(1,Repeat):
            print i     
            if i < 10:
                ID = "00" + str(i)
            else:
                if i < 100:
                    ID = "0" + str(i)
                else:
                    ID = str(i)
                         
            #クリップ後ファイル名準備 
            tiff_split = tiff_split_path + "\\" + basename + "_" + ID + ".tif"                     
            
            if os.path.exists(tiff_split) == False:
                #属性検索→選択フィーチャをコピー                          
                selection = "\"" + "FID\"" + " = " + str(i-1)        
                arcpy.SelectLayerByAttribute_management(zukaku_selected_lyr, "NEW_SELECTION", selection)
                                               
                #分割シェープファイルの範囲でimg画像をクリップ 
                arcpy.Clip_management(clip_image, "#", tiff_split, zukaku_selected_lyr, "0", "ClippingGeometry")
                print "tiff_split_" +  ID
                
                arcpy.ExportRasterWorldFile_management(tiff_split)
                

    
#--- 処理終了時間
    End_Time = datetime.datetime.now()
    elapsed_time = End_Time - Start_Time
    print ""
    print "処理時間：",(End_Time - Start_Time)
    print "終了時間：",End_Time.strftime("%Y-%m-%d %H:%M:%S")

#--- End of Main ---